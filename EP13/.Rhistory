datos <- read.csv2(file.choose(),
encoding = "latin1",
stringsAsFactors = TRUE,
check.names = F)
View(datos)
mujeres <- datos %>% filter(Gender == "0")
library(ez)
library(ggpubr)
library(tidyr)
library(dplyr)
library(boot)
library(simpleboot)
library(bootES)
library(WRS2)
library(stringr)
mujeres <- datos %>% filter(Gender == "0")
View(mujeres)
set.seed(3728)
muestra.mujeres <- sample(mujeres,50)
muestra.mujeres <- sample(mujeres,50)
View(mujeres)
View(datos)
View(mujeres)
View(datos)
View(mujeres)
muestra.mujeres <- sample(mujeres,50)
muestra.mujeres <- mujeres[sample(nrow(mujeres),size(50))]
muestra.mujeres <- mujeres[sample(nrow(mujeres),size=50)]
muestra.mujeres <- mujeres[sample(nrow(mujeres),size=50),]
View(muestra.mujeres)
set.seed(1998)
muestra.mujeres.8variables <- muestra.mujeres[,sample(ncol(muestras.mujeres),size=8)]
set.seed(1998)
muestra.mujeres.8variables <- muestra.mujeres[,sample(ncol(muestras.mujeres),size=8)]
set.seed(1998)
muestra.mujeres.8variables <- muestra.mujeres[,sample(ncol(muestra.mujeres),size=8)]
cor(muestra.mujeres$Height,muestra.mujeres$Weight)
r <- cor(muestra.mujeres$Height,muestra.mujeres$Weight)
# r <- cor(muestra.mujeres$Height,muestra.mujeres$Weight)
# Ajustar modelo con R.
modelo <- lm( muestra.mujeres$Weight ~ muestra.mujeres$Height , data = muestra.mujeres )
print( summary ( modelo ) )
# Graficar el modelo .
p <- ggscatter( datos , x = "wt", y = " mpg", color = " blue ", fill = " blue ",
xlab = " Peso [lb x 1000] ", ylab = " Rendimiento [ millas /galón]")
modelo <- lm( muestra.mujeres$Weight ~ muestra.mujeres$Height , data = muestra.mujeres )
print( summary ( modelo ) )
# Graficar el modelo .
p <- ggscatter( muestra.mujeres , x = "wt", y = " mpg", color = " blue ", fill = " blue ",
xlab = " Peso [lb x 1000] ", ylab = " Rendimiento [ millas /galón]")
# r <- cor(muestra.mujeres$Height,muestra.mujeres$Weight)
muestas.pesoYaltura <- select(muestra.mujeres,Weight,Height)
# Ajustar modelo con R.
modelo <- lm( muestra.mujeres$Weight ~ muestra.mujeres$Height , data = muestra.pesoYaltura )
# r <- cor(muestra.mujeres$Height,muestra.mujeres$Weight)
muestra.pesoYaltura <- select(muestra.mujeres,Weight,Height)
# Ajustar modelo con R.
modelo <- lm( muestra.mujeres$Weight ~ muestra.mujeres$Height , data = muestra.pesoYaltura )
print( summary ( modelo ) )
# Graficar el modelo .
p <- ggscatter( muestra.mujeres , x = "wt", y = " mpg", color = " blue ", fill = " blue ",
xlab = " Peso [lb x 1000] ", ylab = " Rendimiento [ millas /galón]")
# Graficar el modelo .
p <- ggscatter( muestra.mujeres , x = "wt", y = " mpg", color = " blue ", fill = " blue ",
xlab = " Peso [lb x 1000] ", ylab = " Rendimiento [ millas /galón]")
# Graficar el modelo .
p <- ggscatter( muestra.pesoYaltura , x = "wt", y = " mpg", color = " blue ", fill = " blue ",
xlab = " Peso [lb x 1000] ", ylab = " Rendimiento [ millas /galón]")
print( summary ( modelo ) )
# Graficar el modelo .
p <- ggscatter( muestra.pesoYaltura , x = "wt", y = " mpg", color = " blue ", fill = " blue ",
xlab = " Peso [lb x 1000] ", ylab = " Rendimiento [ millas /galón]")
muesta.filtrada <- muestra.mujeres %>% select(!=muestra.mujeres.8variables)
muesta.filtrada <- select(muestra.mujeres != muestra.mujeres.8variables)
muesta.filtrada <- muestra.mujeres %>% select(!muestra.mujeres.8variables)
nombre.variables <- colnames(mujeres)
set.seed(3728)
nombre.8var <- sample(nombre.variables,8)
set.seed(3728)
muestra.mujeres <- mujeres[sample(nrow(mujeres),size=50),]
muestra.mujeres.8variables <- select(nombre.8var)
muestra.mujeres.8variables <- muestra.mujeres %>% select(nombre.8var)
set.seed(3728)
# 2. Seleccionar una muestra de 50 mujeres (si la semilla es un número par)
# o 50 hombres (si la semilla es impar).
# semilla es par, luego utilizamos una muestra de 50 mujeres
mujeres <- datos %>% filter(Gender == "0")
nombre.variables <- colnames(mujeres)
muestra.mujeres <- mujeres[sample(nrow(mujeres),size=50),]
set.seed(1998)
nombre.variables <- colnames(mujeres)
nombre.8var <- sample(nombre.variables,8)
muestra.mujeres.8variables <- muestra.mujeres %<% select(nombre.8var)
set.seed(1998)
nombre.variables <- colnames(mujeres)
nombre.8var <- sample(nombre.variables,8)
muestra.mujeres.8variables <- muestra.mujeres %>% select(nombre.8var)
# 5. Usando el entorno R, construir un modelo de regresión lineal simple con
# el predictor seleccionado en el paso anterior.
muesta.filtrada <- muestra.mujeres %>% select(!nombre.8var)
View(muesta.filtrada)
muestra.filtrada <- muestra.mujeres %>% select(!nombre.8var)
matriz.covarianza <- cor(muestra.filtrada, y= muestra.mujeres$Weight)
print(matriz.covarianza)
# Ajustar modelo con R.
modelo <- lm( muestra.mujeres$Weight ~ muestra.mujeres$Hip.Girth , data = muestra.mujeres)
print(summary (modelo ))
nombre.9var <- c(nombre.8var, Hip.Girth)
nombre.9var <- c(nombre.8var, "Hip.Girth")
nombre.9var <- c(nombre.8var, "Hip.Girth")
muestra.mujeres.9variables <- muestra.mujeres %>% select(nombre.9var)
# 4. Seleccionar, entre las variables que no fueron escogidas en el punto
# anterior, una que el equipo considere que podría ser útil para predecir
# la variable Peso, justificando bien esta selección.
muestra.filtrada2 <- muestra.mujeres %>% select(!nombre.9var)
matriz.covarianza2 <- cor(muestra.filtrada2, y= muestra.mujeres$Weight)
print(matriz.covarianza)
nombre.9var <- c(nombre.8var, "Hip.Girth")
muestra.mujeres.9variables <- muestra.mujeres %>% select(nombre.9var)
# Ajustar modelo nulo.
nulo <- lm(mpg ~ 1, data = muestra.mujeres.9variables)
# Ajustar modelo.
modelo <- lm(muestra.mujeres$Weight ~ wt + qsec + am, data = muestra.mujeres.9variables)
nombre.9var <- c(nombre.8var, "Hip.Girth")
muestra.mujeres.9variables <- muestra.mujeres %>% select(nombre.9var)
# Ajustar modelo con todos los subconjuntos.
modelos <- regsubsets(muestra.mujeres$Weight ~ .,
data = muestra.mujeres.9variables,
method = "exhaustive", nbest = 1, nvmax = 10)
library(leaps)
# Ajustar modelo con todos los subconjuntos.
modelos <- regsubsets(muestra.mujeres$Weight ~ .,
data = muestra.mujeres.9variables,
method = "exhaustive", nbest = 1, nvmax = 10)
print(plot(modelos))
# Ajustar modelo con todos los subconjuntos.
modelos <- regsubsets(muestra.mujeres$Weight ~ .,
data = muestra.mujeres.9variables,
method = "exhaustive", nbest = 4, nvmax = 9)
print(plot(modelos))
# Ajustar modelo con todos los subconjuntos.
modelos <- regsubsets(muestra.mujeres$Weight ~ .,
data = muestra.mujeres.9variables,
method = "exhaustive", nbest = 2, nvmax = 9)
print(plot(modelos))
# Ajustar modelo con todos los subconjuntos.
modelos <- regsubsets(muestra.mujeres$Weight ~ .,
data = muestra.mujeres.9variables,
method = "exhaustive", nbest = 1, nvmax = 9)
print(plot(modelos))
# Comprobar independencia de los residuos.
cat("Prueba de Durbin-Watson para autocorrelaciones ")
cat("entre errores:\n")
print(durbinWatsonTest(modelos))
library(car)
# Comprobar independencia de los residuos.
cat("Prueba de Durbin-Watson para autocorrelaciones ")
cat("entre errores:\n")
print(durbinWatsonTest(modelos))
print(plot(modelos))
# Ajustar modelo.
modelo <- lm(muestra.mujeres$Weight ~
muestra.mujeres$Knee.Girth +
muestra.mujeres$Forearm.Girth +
muestra.mujeres$Hip.Girth, data = datos)
# Comprobar independencia de los residuos.
cat("Prueba de Durbin-Watson para autocorrelaciones ")
cat("entre errores:\n")
print(durbinWatsonTest(modelo))
# Comprobar normalidad de los residuos.
cat("\nPrueba de normalidad para los residuos:\n")
print(shapiro.test(modelo$residuals))
# Comprobar homocedasticidad de los residuos.
cat("Prueba de homocedasticidad para los residuos:\n")
print(ncvTest(modelo))
# Comprobar la multicolinealidad.
vifs <- vif(modelo)
cat("\nVerificar la multicolinealidad:\n")
cat("- VIFs:\n")
print(vifs)
cat("- Tolerancias:\n")
print(1 / vifs)
cat("- VIF medio:", mean(vifs), "\n")
print(modelo)
print(durbinWatsonTest(modelo))
print(summary(modelo))
# Ajustar modelo.
modelo <- lm(muestra.mujeres$Weight ~
muestra.mujeres$Forearm.Girth +
muestra.mujeres$Hip.Girth, data = datos)
print(modelo)
# Comprobar independencia de los residuos.
cat("Prueba de Durbin-Watson para autocorrelaciones ")
cat("entre errores:\n")
print(durbinWatsonTest(modelo))
# Comprobar normalidad de los residuos.
cat("\nPrueba de normalidad para los residuos:\n")
print(shapiro.test(modelo$residuals))
# Comprobar homocedasticidad de los residuos.
cat("Prueba de homocedasticidad para los residuos:\n")
print(ncvTest(modelo))
# Comprobar la multicolinealidad.
vifs <- vif(modelo)
cat("\nVerificar la multicolinealidad:\n")
cat("- VIFs:\n")
print(vifs)
cat("- Tolerancias:\n")
print(1 / vifs)
cat("- VIF medio:", mean(vifs), "\n")
# Ajustar modelo.
modelo <- lm(muestra.mujeres$Weight ~
muestra.mujeres$Knee.Girth +
muestra.mujeres$Forearm.Girth +
muestra.mujeres$Hip.Girth, data = datos)
print(modelo)
# Comprobar independencia de los residuos.
cat("Prueba de Durbin-Watson para autocorrelaciones ")
cat("entre errores:\n")
print(durbinWatsonTest(modelo))
# Comprobar normalidad de los residuos.
cat("\nPrueba de normalidad para los residuos:\n")
print(shapiro.test(modelo$residuals))
# Comprobar homocedasticidad de los residuos.
cat("Prueba de homocedasticidad para los residuos:\n")
print(ncvTest(modelo))
# Comprobar la multicolinealidad.
vifs <- vif(modelo)
cat("\nVerificar la multicolinealidad:\n")
cat("- VIFs:\n")
print(vifs)
cat("- Tolerancias:\n")
print(1 / vifs)
cat("- VIF medio:", mean(vifs), "\n")
set.seed(3728)
# 2. Seleccionar una muestra de 50 mujeres (si la semilla es un número par)
# o 50 hombres (si la semilla es impar).
# semilla es par, luego utilizamos una muestra de 50 mujeres
mujeres <- datos %>% filter(Gender == "0")
nombre.variables <- colnames(mujeres)
indices.muestra <- sample(nrow(mujeres)
muestra.mujeres <- mujeres[indices.muestra,size=50),]
set.seed(3728)
# 2. Seleccionar una muestra de 50 mujeres (si la semilla es un número par)
# o 50 hombres (si la semilla es impar).
# semilla es par, luego utilizamos una muestra de 50 mujeres
mujeres <- datos %>% filter(Gender == "0")
nombre.variables <- colnames(mujeres)
indices.muestra <- sample(nrow(mujeres),size=50)
muestra.mujeres <- mujeres[indices.muestra,]
datos.prueba <- muestra.mujeres <- mujeres[!indices.muestra,]
datos.prueba <- muestra.mujeres[!indices.muestra,]
